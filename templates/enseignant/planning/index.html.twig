{% extends 'base.html.twig' %}

{% block title %}Mon Planning d'Enseignant{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .calendar-header {
            background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
            color: white;
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
        }
        .admin-card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        .timetable {
            width: 100%;
            border-collapse: separate;
            border-spacing: 2px;
        }
        .timetable th {
            background-color: #f3f4f6;
            text-align: center;
            padding: 12px;
            font-weight: 600;
            color: #374151;
            border-bottom: 2px solid #e5e7eb;
        }
        .timetable td {
            height: 80px;
            vertical-align: top;
            padding: 0;
            border: 1px solid #e5e7eb;
            background-color: #fdfdfd;
            position: relative;
            transition: all 0.2s ease;
        }
        .timetable td:hover {
            background-color: #f9fafb;
        }
        .day-cell {
            position: relative;
            height: 75px;
            overflow: visible;
        }
        .time-label {
            width: 75px;
            text-align: center;
            font-size: 0.8rem;
            font-weight: 500;
            color: #4b5563;
            padding: 10px 5px;
            vertical-align: middle;
            background-color: #f3f4f6 !important;
            border-right: 2px solid #e5e7eb;
        }
        .event-card {
            margin: 0;
            height: 100%;
            position: relative;
            overflow: hidden;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            z-index: 10;
            border-radius: 8px;
        }
        .event-card:hover {
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            transform: translateY(-2px);
        }
        .event-card.cours {
            background: linear-gradient(135deg, rgba(25, 135, 84, 0.9) 0%, rgba(40, 167, 69, 0.9) 100%);
            color: white;
        }
        .event-card.examen {
            background: linear-gradient(135deg, rgba(220, 53, 69, 0.9) 0%, rgba(255, 107, 107, 0.9) 100%);
            color: white;
        }
        .event-card.reunion {
            background: linear-gradient(135deg, rgba(255, 193, 7, 0.9) 0%, rgba(255, 153, 0, 0.9) 100%);
            color: white;
        }
        .event-card.autre {
            background: linear-gradient(135deg, rgba(108, 117, 125, 0.9) 0%, rgba(73, 80, 87, 0.9) 100%);
            color: white;
        }
        .event-title {
            font-weight: 600;
            font-size: 0.85rem;
            padding: 8px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            margin-bottom: 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }
        .event-info {
            font-size: 0.75rem;
            padding: 8px;
            opacity: 0.9;
        }
        .event-info div {
            margin-bottom: 3px;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        .type-badge {
            font-size: 0.65rem;
            padding: 2px 5px;
            border-radius: 4px;
        }
        .day-header {
            text-align: center;
            font-weight: 500;
            padding: 10px;
            background-color: #e9ecef;
            border-radius: 5px 5px 0 0;
        }
        .empty-cell {
            background-color: #f8f9fa;
            text-align: center;
            color: #adb5bd;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .navigation-buttons {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 20px 0;
        }
        .navigation-buttons button {
            margin: 0 5px;
            height: 38px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .nav-week-label {
            font-size: 1rem;
            display: inline-block;
            width: 200px;
            text-align: center;
            color: #4e73df;
        }
        .today-column {
            background-color: rgba(59, 130, 246, 0.05) !important;
        }
        .today {
            background-color: rgba(25, 135, 84, 0.1);
        }
        .btn-floating {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
            color: white;
            border: none;
            font-size: 24px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
            z-index: 1000;
        }
        .btn-floating:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.4);
        }
        .time-badge {
            background: rgba(0, 123, 255, 0.1);
            color: #007bff;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }
        .cours-badge {
            background: rgba(40, 167, 69, 0.1);
            color: #28a745;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }
        .calendar-filters {
            background: #fff;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        /* Style pour la vue mobile */
        @media (max-width: 768px) {
            .timetable {
                font-size: 0.8rem;
            }
            .time-label {
                width: 50px;
                font-size: 0.7rem;
            }
            .event-title {
                font-size: 0.7rem;
            }
            .event-info {
                font-size: 0.6rem;
            }
        }
    </style>
{% endblock %}

{% block body %}
<div class="container mt-4">
    <!-- En-tÃªte du planning -->
    <div class="calendar-header">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="mb-2">ðŸ“… Mon Planning d'Enseignant</h1>
                <p class="mb-0">GÃ©rez vos cours et Ã©vÃ©nements</p>
            </div>
            <div class="col-md-4 text-md-end">
                <div class="d-flex justify-content-md-end gap-2">
                    <a href="{{ path('enseignant_dashboard') }}" class="btn btn-light">
                        <i class="fas fa-arrow-left"></i> Retour
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Navigation du planning -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card admin-card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <!-- Filtres -->
                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label for="filterCours" class="form-label">Cours</label>
                                    <select class="form-select" id="filterCours">
                                        <option value="">Tous mes cours</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <label for="filterType" class="form-label">Type</label>
                                    <select class="form-select" id="filterType">
                                        <option value="">Tous les types</option>
                                        <option value="cours">Cours</option>
                                        <option value="examen">Examen</option>
                                        <option value="reunion">RÃ©union</option>
                                        <option value="autre">Autre</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <label for="filterClasse" class="form-label">Classe</label>
                                    <select class="form-select" id="filterClasse">
                                        <option value="">Toutes les classes</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="navigation-buttons">
                                <button id="prevWeekBtn" class="btn btn-outline-secondary" style="width: 40px;">
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                                <button id="currentWeekBtn" class="btn btn-outline-primary mx-2 px-3">
                                    Cette semaine
                                </button>
                                <span class="nav-week-label fw-bold" id="weekRangeDisplay">
                                    <!-- Sera rempli par JavaScript -->
                                </span>
                                <button id="nextWeekBtn" class="btn btn-outline-secondary" style="width: 40px;">
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Emploi du temps hebdomadaire -->
    <div class="row">
        <div class="col-12">
            <div class="card admin-card">
                <div class="card-header bg-white d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-calendar-week"></i> <span id="weekLabel">Semaine en cours</span>
                    </h5>
                    <div>
                        <button class="btn btn-outline-secondary px-3" onclick="window.print()">
                            <i class="fas fa-print"></i> Imprimer
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="timetable" id="planningTable">
                            <thead>
                                <tr>
                                    <th class="time-label"></th>
                                    <th>Lundi</th>
                                    <th>Mardi</th>
                                    <th>Mercredi</th>
                                    <th>Jeudi</th>
                                    <th>Vendredi</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- CrÃ©neaux horaires de 8h Ã  18h -->
                                {% for hour in 8..18 %}
                                    <tr>
                                        <td class="time-label">{{ hour }}:00</td>
                                        {% for day in 0..4 %}
                                            <td class="day-cell" data-hour="{{ hour }}" data-day="{{ day }}">
                                                <!-- Les Ã©vÃ©nements seront placÃ©s ici par JavaScript -->
                                                <div class="empty-cell">
                                                    <i class="fas fa-calendar-plus text-muted" style="opacity: 0.2; font-size: 0.8rem;"></i>
                                                </div>
                                            </td>
                                        {% endfor %}
                                    </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Ã‰vÃ©nements du jour -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card admin-card">
                <div class="card-header bg-white">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-calendar-day"></i> Ã‰vÃ©nements du jour
                    </h5>
                </div>
                <div class="card-body">
                    <div id="todayEvents">
                        <!-- Sera rempli par JavaScript -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bouton flottant pour ajouter un Ã©vÃ©nement -->
    {% if cours|length > 0 %}
        <div class="dropdown">
            <button class="btn-floating dropdown-toggle" type="button" id="addEventDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-plus"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="addEventDropdown">
                <li><h6 class="dropdown-header">Ajouter un Ã©vÃ©nement pour :</h6></li>
                {% for c in cours %}
                    <li><a class="dropdown-item" href="{{ path('enseignant_planning_new', {coursId: c.id}) }}">
                        <i class="fas fa-book"></i> {{ c.titre }}
                    </a></li>
                {% endfor %}
            </ul>
        </div>
    {% endif %}
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DonnÃ©es des Ã©vÃ©nements du planning
            const events = [
                {% for event in planning %}
                    {
                        id: {{ event.id }},
                        title: "{{ event.titre }}",
                        description: "{{ event.description|default('') }}",
                        start: "{{ event.dateDebut|date('Y-m-d H:i:s') }}",
                        end: "{{ event.dateFin ? event.dateFin|date('Y-m-d H:i:s') : event.dateDebut|date_modify('+1 hour')|date('Y-m-d H:i:s') }}",
                        type: "{{ event.type|default('cours') }}",
                        location: "{{ event.lieu|default('') }}",
                        {% if event.cours %}
                        coursId: {{ event.cours.id }},
                        coursTitle: "{{ event.cours.titre }}",
                            {% if event.cours.classe %}
                        classeId: {{ event.cours.classe.id }},
                        classeTitle: "{{ event.cours.classe.nom }}",
                            {% endif %}
                        {% endif %}
                        {% if event.classe %}
                        classeId: {{ event.classe.id }},
                        classeTitle: "{{ event.classe.nom }}",
                        {% endif %}
                    },
                {% endfor %}
            ];

            // Variables de date
            let currentWeekStart = getMonday(new Date());
            let currentWeekEnd = new Date(currentWeekStart);
            currentWeekEnd.setDate(currentWeekEnd.getDate() + 4);

            // Filtres actifs
            let activeFilters = {
                cours: '',
                type: '',
                classe: ''
            };

            // Initialisation
            updateWeekDisplay();
            populateFilters();
            populateCalendar();
            showTodayEvents();

            // Gestionnaires d'Ã©vÃ©nements pour les filtres
            document.getElementById('filterCours').addEventListener('change', function() {
                activeFilters.cours = this.value;
                populateCalendar();
            });

            document.getElementById('filterType').addEventListener('change', function() {
                activeFilters.type = this.value;
                populateCalendar();
            });

            document.getElementById('filterClasse').addEventListener('change', function() {
                activeFilters.classe = this.value;
                populateCalendar();
            });

            // Gestion des boutons de navigation
            document.getElementById('prevWeekBtn').addEventListener('click', function() {
                currentWeekStart.setDate(currentWeekStart.getDate() - 7);
                currentWeekEnd.setDate(currentWeekEnd.getDate() - 7);
                updateWeekDisplay();
                populateCalendar();
            });

            document.getElementById('nextWeekBtn').addEventListener('click', function() {
                currentWeekStart.setDate(currentWeekStart.getDate() + 7);
                currentWeekEnd.setDate(currentWeekEnd.getDate() + 7);
                updateWeekDisplay();
                populateCalendar();
            });

            document.getElementById('currentWeekBtn').addEventListener('click', function() {
                currentWeekStart = getMonday(new Date());
                currentWeekEnd = new Date(currentWeekStart);
                currentWeekEnd.setDate(currentWeekEnd.getDate() + 4);
                updateWeekDisplay();
                populateCalendar();
            });

            // Fonction pour remplir les filtres
            function populateFilters() {
                // Cours uniques
                const coursSelect = document.getElementById('filterCours');
                const uniqueCourses = new Map();
                
                events.forEach(event => {
                    if (event.coursTitle && event.coursId) {
                        uniqueCourses.set(event.coursId, event.coursTitle);
                    }
                });
                
                uniqueCourses.forEach((title, id) => {
                    const option = document.createElement('option');
                    option.value = id;
                    option.textContent = title;
                    coursSelect.appendChild(option);
                });

                // Classes uniques
                const classeSelect = document.getElementById('filterClasse');
                const uniqueClasses = new Map();
                
                events.forEach(event => {
                    if (event.classeTitle && event.classeId) {
                        uniqueClasses.set(event.classeId, event.classeTitle);
                    }
                });
                
                uniqueClasses.forEach((name, id) => {
                    const option = document.createElement('option');
                    option.value = id;
                    option.textContent = name;
                    classeSelect.appendChild(option);
                });
            }

            // Fonctions
            function getMonday(date) {
                const day = date.getDay();
                const diff = date.getDate() - day + (day === 0 ? -6 : 1); // Adjust for Sunday
                const monday = new Date(date);
                monday.setDate(diff);
                monday.setHours(0, 0, 0, 0);
                return monday;
            }

            function formatDate(date) {
                const options = { day: '2-digit', month: '2-digit', year: 'numeric' };
                return date.toLocaleDateString('fr-FR', options);
            }

            function updateWeekDisplay() {
                const weekRangeDisplay = document.getElementById('weekRangeDisplay');
                weekRangeDisplay.textContent = `${formatDate(currentWeekStart)} - ${formatDate(currentWeekEnd)}`;
                
                const weekLabel = document.getElementById('weekLabel');
                weekLabel.textContent = `Semaine du ${formatDate(currentWeekStart)}`;
            }

            function populateCalendar() {
                // RÃ©initialiser les cellules
                const cells = document.querySelectorAll('.day-cell');
                cells.forEach(cell => {
                    cell.innerHTML = '<div class="empty-cell"><i class="fas fa-calendar-plus text-muted" style="opacity: 0.2; font-size: 0.8rem;"></i></div>';
                    cell.style.position = 'relative';
                    cell.style.visibility = 'visible'; // RÃ©initialiser la visibilitÃ©
                });

                // Filtrer les Ã©vÃ©nements selon les critÃ¨res actifs
                let filteredEvents = events.filter(event => {
                    const eventDate = new Date(event.start);
                    const isInWeek = eventDate >= currentWeekStart && eventDate <= new Date(currentWeekEnd.getTime() + 24*60*60*1000);
                    
                    // Appliquer les filtres
                    const matchesCours = !activeFilters.cours || (event.coursId && event.coursId.toString() === activeFilters.cours);
                    const matchesType = !activeFilters.type || event.type === activeFilters.type;
                    const matchesClasse = !activeFilters.classe || (event.classeId && event.classeId.toString() === activeFilters.classe);
                    
                    return isInWeek && matchesCours && matchesType && matchesClasse;
                });

                // Trier par date et heure
                filteredEvents.sort((a, b) => new Date(a.start) - new Date(b.start));

                // Traquer les cellules dÃ©jÃ  occupÃ©es
                const occupiedCells = new Set();

                // Placer les Ã©vÃ©nements dans le tableau
                filteredEvents.forEach(event => {
                    const eventDate = new Date(event.start);
                    const dayIndex = eventDate.getDay() - 1; // 0 = lundi, 4 = vendredi
                    const startHour = eventDate.getHours();
                    
                    if (dayIndex >= 0 && dayIndex <= 4) { // Jours de semaine uniquement
                        const eventEndDate = new Date(event.end);
                        let endHour = eventEndDate.getHours();
                        
                        // Si l'Ã©vÃ©nement se termine Ã  l'heure pile et les minutes sont 0, on prend l'heure prÃ©cÃ©dente
                        if (eventEndDate.getMinutes() === 0 && endHour > startHour) {
                            endHour--;
                        }
                        
                        // Calculer la durÃ©e en heures (arrondie Ã  l'heure supÃ©rieure)
                        let duration = endHour - startHour + 1;
                        if (duration < 1) duration = 1;
                        
                        // VÃ©rifier si la cellule de dÃ©part est disponible
                        const startCellSelector = `.day-cell[data-day="${dayIndex}"][data-hour="${startHour}"]`;
                        const startCell = document.querySelector(startCellSelector);
                        
                        if (startCell && !occupiedCells.has(startCellSelector)) {
                            // Marquer la cellule de dÃ©part comme occupÃ©e
                            occupiedCells.add(startCellSelector);
                            
                            // CrÃ©er l'Ã©lÃ©ment d'Ã©vÃ©nement
                            startCell.innerHTML = '';
                            const eventElement = document.createElement('div');
                            eventElement.className = `event-card ${event.type}`;
                            eventElement.style.height = `${duration * 100}%`;
                            eventElement.style.position = 'absolute';
                            eventElement.style.top = '0';
                            eventElement.style.left = '0';
                            eventElement.style.right = '0';
                            eventElement.style.zIndex = '10';
                            
                            // Si l'Ã©vÃ©nement dure plus d'une heure, on ajuste la hauteur et on masque les cellules suivantes
                            if (duration > 1) {
                                // Hauteur proportionnelle Ã  la durÃ©e
                                const heightMultiplier = duration;
                                eventElement.style.height = `calc(${heightMultiplier * 100}%)`;
                                
                                // Marquer les cellules suivantes comme occupÃ©es
                                for (let h = 1; h < duration; h++) {
                                    if (startHour + h <= 18) {  // VÃ©rifier que nous ne dÃ©passons pas la fin du tableau
                                        const nextCellSelector = `.day-cell[data-day="${dayIndex}"][data-hour="${startHour + h}"]`;
                                        occupiedCells.add(nextCellSelector);
                                        const nextCell = document.querySelector(nextCellSelector);
                                        if (nextCell) {
                                            nextCell.style.visibility = 'hidden';
                                        }
                                    }
                                }
                            }
                            
                            // Afficher un badge pour le type d'Ã©vÃ©nement
                            const typeBadge = `<span class="badge type-badge bg-${getEventTypeBadge(event.type)}">${getEventTypeLabel(event.type)}</span>`;
                            
                            eventElement.innerHTML = `
                                <div class="event-title">${event.title} ${typeBadge}</div>
                                <div class="event-info">
                                    <div><i class="fas fa-clock"></i> ${formatTime(eventDate)} - ${formatTime(eventEndDate)}</div>
                                    ${event.location ? `<div><i class="fas fa-map-marker-alt"></i> ${event.location}</div>` : ''}
                                    ${event.coursTitle ? `<div><i class="fas fa-book"></i> ${event.coursTitle}</div>` : ''}
                                    ${event.classeTitle ? `<div><i class="fas fa-users"></i> ${event.classeTitle}</div>` : ''}
                                </div>
                            `;
                            
                            // Ajouter une infobulle dÃ©taillÃ©e sur l'Ã©vÃ©nement
                            eventElement.setAttribute('data-bs-toggle', 'tooltip');
                            eventElement.setAttribute('data-bs-html', 'true');
                            eventElement.setAttribute('data-bs-title', `
                                <strong>${event.title}</strong><br>
                                ${formatTime(eventDate)} - ${formatTime(eventEndDate)}<br>
                                ${event.coursTitle ? `Cours: ${event.coursTitle}<br>` : ''}
                                ${event.classeTitle ? `Classe: ${event.classeTitle}<br>` : ''}
                                ${event.location ? `Lieu: ${event.location}<br>` : ''}
                                ${event.description ? `<small>${event.description}</small>` : ''}
                            `);
                            
                            startCell.appendChild(eventElement);
                        }
                    }
                });
                
                // Initialiser les tooltips
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl, {
                        container: 'body'
                    });
                });
            }

            function showTodayEvents() {
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                const tomorrow = new Date(today);
                tomorrow.setDate(tomorrow.getDate() + 1);
                
                // Filtrer les Ã©vÃ©nements d'aujourd'hui
                const todayEvents = events.filter(event => {
                    const eventDate = new Date(event.start);
                    return eventDate >= today && eventDate < tomorrow;
                });
                
                // Afficher les Ã©vÃ©nements
                const todayEventsContainer = document.getElementById('todayEvents');
                
                if (todayEvents.length > 0) {
                    let html = '<div class="list-group">';
                    todayEvents.sort((a, b) => new Date(a.start) - new Date(b.start));
                    
                    todayEvents.forEach(event => {
                        const eventDate = new Date(event.start);
                        const eventEndDate = new Date(event.end);
                        
                        html += `
                            <div class="list-group-item list-group-item-action">
                                <div class="d-flex w-100 justify-content-between">
                                    <h5 class="mb-1">${event.title}</h5>
                                    <small class="text-muted">${formatTime(eventDate)} - ${formatTime(eventEndDate)}</small>
                                </div>
                                <p class="mb-1">${event.description || 'Aucune description'}</p>
                                <div class="d-flex flex-wrap gap-2 mt-2">
                                    ${event.coursTitle ? `<span class="badge bg-success">${event.coursTitle}</span>` : ''}
                                    ${event.classeTitle ? `<span class="badge bg-primary">${event.classeTitle}</span>` : ''}
                                    ${event.location ? `<span class="badge bg-info text-dark">${event.location}</span>` : ''}
                                    <span class="badge bg-${getEventTypeBadge(event.type)}">${getEventTypeLabel(event.type)}</span>
                                </div>
                                <div class="mt-2 text-end">
                                    <a href="{{ path('enseignant_planning_edit', {id: 0}) }}".replace('0', event.id) class="btn btn-sm btn-outline-primary">
                                        <i class="fas fa-edit"></i> Modifier
                                    </a>
                                </div>
                            </div>
                        `;
                    });
                    
                    html += '</div>';
                    todayEventsContainer.innerHTML = html;
                } else {
                    todayEventsContainer.innerHTML = `
                        <div class="text-center py-5 text-muted">
                            <i class="fas fa-calendar-day fa-3x mb-3"></i>
                            <h4>Aucun Ã©vÃ©nement aujourd'hui</h4>
                            <p>Vous n'avez pas d'Ã©vÃ©nements planifiÃ©s pour aujourd'hui.</p>
                        </div>
                    `;
                }
            }

            function formatTime(date) {
                return date.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });
            }
            
            function getEventTypeLabel(type) {
                switch(type) {
                    case 'cours': return 'Cours';
                    case 'examen': return 'Examen';
                    case 'reunion': return 'RÃ©union';
                    default: return 'Autre';
                }
            }
            
            function getEventTypeBadge(type) {
                switch(type) {
                    case 'cours': return 'success';
                    case 'examen': return 'danger';
                    case 'reunion': return 'warning';
                    default: return 'secondary';
                }
            }
        });
    </script>
{% endblock %}
